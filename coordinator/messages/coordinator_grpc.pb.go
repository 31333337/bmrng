// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package coord

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoordinatorHandlerClient is the client API for CoordinatorHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinatorHandlerClient interface {
	// Signal servers to exchange keys, after all servers online
	KeySet(ctx context.Context, in *KeyInformation, opts ...grpc.CallOption) (*KeyInformation, error)
	// Signal setup of a new round
	RoundSetup(ctx context.Context, in *RoundInfo, opts ...grpc.CallOption) (*Empty, error)
	// Signal clients to submit messages, after the round has been setup
	ClientStart(ctx context.Context, in *RoundInfo, opts ...grpc.CallOption) (*Empty, error)
	// Signal the start of a round, at the time after clients have submitted messages
	RoundStart(ctx context.Context, in *RoundInfo, opts ...grpc.CallOption) (*Empty, error)
	// Signal clients to check receipts, at the time after the round and before the next
	CheckReceipt(ctx context.Context, in *RoundInfo, opts ...grpc.CallOption) (*Empty, error)
	// Check that the final output messages are correct; used to time end of round
	GetMessages(ctx context.Context, in *RoundInfo, opts ...grpc.CallOption) (*ServerMessages, error)
}

type coordinatorHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinatorHandlerClient(cc grpc.ClientConnInterface) CoordinatorHandlerClient {
	return &coordinatorHandlerClient{cc}
}

func (c *coordinatorHandlerClient) KeySet(ctx context.Context, in *KeyInformation, opts ...grpc.CallOption) (*KeyInformation, error) {
	out := new(KeyInformation)
	err := c.cc.Invoke(ctx, "/coord.CoordinatorHandler/KeySet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorHandlerClient) RoundSetup(ctx context.Context, in *RoundInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/coord.CoordinatorHandler/RoundSetup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorHandlerClient) ClientStart(ctx context.Context, in *RoundInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/coord.CoordinatorHandler/ClientStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorHandlerClient) RoundStart(ctx context.Context, in *RoundInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/coord.CoordinatorHandler/RoundStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorHandlerClient) CheckReceipt(ctx context.Context, in *RoundInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/coord.CoordinatorHandler/CheckReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorHandlerClient) GetMessages(ctx context.Context, in *RoundInfo, opts ...grpc.CallOption) (*ServerMessages, error) {
	out := new(ServerMessages)
	err := c.cc.Invoke(ctx, "/coord.CoordinatorHandler/GetMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinatorHandlerServer is the server API for CoordinatorHandler service.
// All implementations must embed UnimplementedCoordinatorHandlerServer
// for forward compatibility
type CoordinatorHandlerServer interface {
	// Signal servers to exchange keys, after all servers online
	KeySet(context.Context, *KeyInformation) (*KeyInformation, error)
	// Signal setup of a new round
	RoundSetup(context.Context, *RoundInfo) (*Empty, error)
	// Signal clients to submit messages, after the round has been setup
	ClientStart(context.Context, *RoundInfo) (*Empty, error)
	// Signal the start of a round, at the time after clients have submitted messages
	RoundStart(context.Context, *RoundInfo) (*Empty, error)
	// Signal clients to check receipts, at the time after the round and before the next
	CheckReceipt(context.Context, *RoundInfo) (*Empty, error)
	// Check that the final output messages are correct; used to time end of round
	GetMessages(context.Context, *RoundInfo) (*ServerMessages, error)
	mustEmbedUnimplementedCoordinatorHandlerServer()
}

// UnimplementedCoordinatorHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedCoordinatorHandlerServer struct {
}

func (UnimplementedCoordinatorHandlerServer) KeySet(context.Context, *KeyInformation) (*KeyInformation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeySet not implemented")
}
func (UnimplementedCoordinatorHandlerServer) RoundSetup(context.Context, *RoundInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoundSetup not implemented")
}
func (UnimplementedCoordinatorHandlerServer) ClientStart(context.Context, *RoundInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientStart not implemented")
}
func (UnimplementedCoordinatorHandlerServer) RoundStart(context.Context, *RoundInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoundStart not implemented")
}
func (UnimplementedCoordinatorHandlerServer) CheckReceipt(context.Context, *RoundInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckReceipt not implemented")
}
func (UnimplementedCoordinatorHandlerServer) GetMessages(context.Context, *RoundInfo) (*ServerMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedCoordinatorHandlerServer) mustEmbedUnimplementedCoordinatorHandlerServer() {}

// UnsafeCoordinatorHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinatorHandlerServer will
// result in compilation errors.
type UnsafeCoordinatorHandlerServer interface {
	mustEmbedUnimplementedCoordinatorHandlerServer()
}

func RegisterCoordinatorHandlerServer(s grpc.ServiceRegistrar, srv CoordinatorHandlerServer) {
	s.RegisterService(&CoordinatorHandler_ServiceDesc, srv)
}

func _CoordinatorHandler_KeySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyInformation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorHandlerServer).KeySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coord.CoordinatorHandler/KeySet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorHandlerServer).KeySet(ctx, req.(*KeyInformation))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorHandler_RoundSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoundInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorHandlerServer).RoundSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coord.CoordinatorHandler/RoundSetup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorHandlerServer).RoundSetup(ctx, req.(*RoundInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorHandler_ClientStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoundInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorHandlerServer).ClientStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coord.CoordinatorHandler/ClientStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorHandlerServer).ClientStart(ctx, req.(*RoundInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorHandler_RoundStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoundInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorHandlerServer).RoundStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coord.CoordinatorHandler/RoundStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorHandlerServer).RoundStart(ctx, req.(*RoundInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorHandler_CheckReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoundInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorHandlerServer).CheckReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coord.CoordinatorHandler/CheckReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorHandlerServer).CheckReceipt(ctx, req.(*RoundInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorHandler_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoundInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorHandlerServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coord.CoordinatorHandler/GetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorHandlerServer).GetMessages(ctx, req.(*RoundInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// CoordinatorHandler_ServiceDesc is the grpc.ServiceDesc for CoordinatorHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoordinatorHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coord.CoordinatorHandler",
	HandlerType: (*CoordinatorHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KeySet",
			Handler:    _CoordinatorHandler_KeySet_Handler,
		},
		{
			MethodName: "RoundSetup",
			Handler:    _CoordinatorHandler_RoundSetup_Handler,
		},
		{
			MethodName: "ClientStart",
			Handler:    _CoordinatorHandler_ClientStart_Handler,
		},
		{
			MethodName: "RoundStart",
			Handler:    _CoordinatorHandler_RoundStart_Handler,
		},
		{
			MethodName: "CheckReceipt",
			Handler:    _CoordinatorHandler_CheckReceipt_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _CoordinatorHandler_GetMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coordinator.proto",
}
